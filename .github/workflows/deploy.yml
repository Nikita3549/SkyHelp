name: Deploy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate .env on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelp || { echo "❌ Directory not found"; exit 1; }
            bash validate-env.sh

      - name: Save last commit on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelp || { echo "❌ Directory not found"; exit 1; }
            git rev-parse HEAD > .last_commit

      - name: Pull latest and deploy on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelp || { echo "❌ Directory not found"; exit 1; }
            last_commit=$(cat .last_commit)

            echo "✅ Pulling latest changes"
            git pull origin master || { echo "❌ Git pull failed"; exit 1; }

            echo "🔧 Building and restarting containers"
            if ! docker compose --profile api up --build -d --remove-orphans; then
              echo "❌ Docker Compose failed — rolling back"
              git reset --hard $last_commit
              docker compose --profile api up -d --remove-orphans || { echo "❌ Rollback failed"; exit 1; }
              exit 1
            fi

            echo "🧹 Cleaning up dangling images"
            docker image prune -f

            echo "🔍 Checking running containers"
            docker ps | grep database || { echo "❌ Database not running"; exit 1; }
            docker ps | grep db-static || { echo "❌ Db-static not running"; exit 1; }
            docker ps | grep redis || { echo "❌ Redis not running"; exit 1; }
            docker ps | grep api || { echo "❌ Api not running"; exit 1; }

            echo "✅ Deployment complete"
