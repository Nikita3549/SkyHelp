name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to deploy"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - both
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate .env
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelp || { echo "‚ùå PROD directory not found"; exit 1; }
            bash validate-env.sh
            
            cd ~/SkyHelpDev || { echo "‚ùå Dev directory not found"; exit 1; }
            bash validate-env.sh

      - name: Save last commit on PROD
        uses: appleboy/ssh-action@v0.1.10
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'both')
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelp || { echo "‚ùå PROD directory not found"; exit 1; }
            git rev-parse HEAD > .last_commit

      - name: Deploy PROD
        uses: appleboy/ssh-action@v0.1.10
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'both')
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelp || { echo "‚ùå PROD directory not found"; exit 1; }
            last_commit=$(cat .last_commit)

            echo "‚úÖ Pulling latest changes (PROD)"
            git pull origin master || { echo "‚ùå Git pull failed"; exit 1; }
            source .env

            echo "üîß Building and restarting PROD containers"
            docker exec -i db-static psql \
              -U "$DATABASE_STATIC_USER" \
              -d "$DATABASE_STATIC_DBNAME" \
              -f /docker-entrypoint-initdb.d/update.sql

            if ! docker compose --profile api up --build -d --remove-orphans; then
              echo "‚ùå Docker Compose failed ‚Äî rolling back"
              git reset --hard $last_commit
              docker compose --profile api up -d --remove-orphans || { echo "‚ùå Rollback failed"; exit 1; }
              exit 1
            fi

            echo "üßπ Cleaning up dangling images"
            docker image prune -f

            echo "‚úÖ PROD Deployment complete"

      - name: Deploy DEV
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd ~/SkyHelpDev || { echo "‚ùå DEV directory not found"; exit 1; }

            echo "‚úÖ Pulling latest changes (DEV)"
            git pull origin master || { echo "‚ùå Git pull failed"; exit 1; }

            echo "üîß Building and restarting DEV containers"
            docker compose -f docker-compose.yml -f docker-compose.dev.yml -p dev --profile api up --build -d --remove-orphans


            echo "üßπ Cleaning up dangling images"
            docker image prune -f

            echo "üßπ Deep cleaning system"
            docker system prune -a -f

            echo "‚úÖ DEV Deployment complete"