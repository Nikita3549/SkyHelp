generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  hashedPassword String   @map("hashed_password")
  name           String
  secondName     String   @map("second_name")
  role           UserRole @default(CLIENT)
  isActive       Boolean  @default(true) @map("is_acitve")
  lastSign       DateTime @default(now()) @map("last_sign")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  claims     Claim[]
  messages   Message[]
  membership ChatMember[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MODERATOR
  CLIENT
}

model Claim {
  id         String        @id @default(cuid()) @map("id")
  step       Int           @default(5)
  userId     String?       @map("user_id")
  user       User?         @relation(fields: [userId], references: [id])
  detailsId  String        @map("details_id")
  details    ClaimDetails  @relation(fields: [detailsId], references: [id])
  stateId    String        @map("state_id")
  state      ClaimState    @relation(fields: [stateId], references: [id])
  customerId String        @map("customer_id")
  customer   ClaimCustomer @relation(fields: [customerId], references: [id])
  issueId    String        @map("issue_id")
  issue      ClaimIssue    @relation(fields: [issueId], references: [id])
  documents  Document[]
  paymentId  String?       @map("payment_id")
  payment    ClaimPayment? @relation(fields: [paymentId], references: [id])
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  @@map("claims")
}

model ClaimDetails {
  id           String   @id @default(cuid()) @map("id")
  date         DateTime @map("date")
  airline      String   @map("airline")
  bookingRef   String?  @map("booking_ref")
  flightNumber String   @map("flight_number")
  Claim        Claim[]
  routes       Route[]

  airlines Airline @relation(fields: [airline], references: [id])

  @@map("claim_details")
}

model Airline {
  id   String @id @default(cuid()) @map("id")
  icao String
  name String

  Details ClaimDetails[]

  @@map("airlines")
}

model Route {
  id               String       @id @default(cuid()) @map("id")
  arrivalAirport   String       @unique @map("arrival_airport")
  departureAirport String       @unique @map("departure_airport")
  troubled         Boolean      @default(false)
  detailsId        String       @map("details_id")
  detail           ClaimDetails @relation(fields: [detailsId], references: [id])

  ArrivalAirport   ArrivalAirport   @relation(fields: [arrivalAirport], references: [id])
  DepartureAirport DepartureAirport @relation(fields: [departureAirport], references: [id])

  @@map("routes")
}

model ArrivalAirport {
  id    String @id @default(cuid()) @map("id")
  icao  String
  name String
  Route Route?

  @@map("arrival_airports")
}

model DepartureAirport {
  id    String @id @default(cuid()) @map("id")
  icao  String
  name String
  Route Route?

  @@map("departure_airports")
}

model ClaimState {
  id        String      @id @default(cuid()) @map("id")
  status    ClaimStatus @default(PENDING) @map("status")
  amount    Int?        @map("amount")
  updatedAt DateTime    @updatedAt @map("updated_at")
  progress  Progress[]
  Claim     Claim[]

  @@map("claim_states")
}

model Progress {
  id           String         @id @default(cuid()) @map("id")
  title        String         @map("title")
  description  String         @map("description")
  endAt        DateTime?      @map("end_at")
  status       ProgressStatus @map("status")
  claimStateId String         @map("claim_state_id")
  claimState   ClaimState     @relation(fields: [claimStateId], references: [id])

  @@map("progresses")
}

enum ClaimStatus {
  COMPLETED
  PENDING
  IN_PROGRESS
  ESCALATED
  REJECTED
  NOT_ELIGIBLE
}

enum ProgressStatus {
  COMPLETED
  IN_PROCESS
}

model ClaimCustomer {
  id            String  @id @default(cuid()) @map("id")
  firstName     String  @map("first_name")
  lastName      String  @map("last_name")
  email         String  @map("email")
  phone         String  @map("phone")
  address       String  @map("address")
  secondAddress String? @map("second_address")
  city          String  @map("city")
  postalCode    String  @map("postal_code")
  state         String? @map("state")
  country       String  @map("country")
  whatsapp      Boolean @map("whatsapp")
  Claim         Claim[]

  @@map("claim_customers")
}

model ClaimIssue {
  id                                 String              @id @default(cuid()) @map("id")
  delay                              DelayCategory?      @map("delay")
  cancellationNoticeDays             CancellationNotice? @map("cancellation_notice_days")
  disruptionType                     DisruptionType      @map("disruption_type")
  airlineReason                      AirlineReason?      @map("airline_reason")
  wasAlternativeFlightOffered        Boolean             @default(false) @map("was_alternative_flight_offered")
  arrivalTimeDelayOfAlternativeHours Int?                @map("arrival_time_delay_of_alternative_hours")
  additionalInfo                     String?             @map("additional_info")
  Claim                              Claim[]

  @@map("claim_issues")
}

enum IssueReason {
  delay
  cancelled
  denied
  missed
}

enum DelayCategory {
  less_than_3hours
  never_arrived
  threehours_or_more @map("3hours_or_more")
}

enum CancellationNotice {
  less_than_14days
  fourteen_days_or_more @map("14days_or_more")
}

enum DisruptionType {
  denied_boarding
  cancellation
  delay
  missed_connection
}

enum AirlineReason {
  technical_problems
  weather
  strike
  issues
  other
  dont_remember
}

model Document {
  id      String @id @default(cuid()) @map("id")
  name    String @map("name")
  path    String @map("path")
  claimId String @map("claim_id")
  claim   Claim  @relation(fields: [claimId], references: [id])

  @@map("documents")
}

model ClaimPayment {
  id            String         @id @default(cuid()) @map("id")
  email         String?        @map("email")
  termsAgreed   Boolean?       @map("terms_agreed")
  paymentMethod PaymentMethod? @map("payment_method")
  bankName      String?        @map("bank_name")
  accountName   String?        @map("account_name")
  accountNumber String?        @map("account_number")
  iban          String?        @map("iban")
  paypalEmail   String?        @map("paypal_email")
  Claim         Claim[]

  @@map("claim_payments")
}

enum PaymentMethod {
  bank_transfer
  paypal
  wise
}

model Chat {
  id        String   @id @default(uuid())
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now()) @map("created_at")

  messages Message[]
  members  ChatMember[]

  @@map("chats")
}

model Message {
  id        String        @id @default(uuid())
  chatId    String        @map("chat_id")
  senderId  String        @map("sender_id")
  content   String
  createdAt DateTime      @default(now()) @map("created_at")
  status    MessageStatus @default(UNREAD)

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@map("messages")
}

enum MessageStatus {
  READ
  UNREAD
}

model ChatMember {
  chatId  String
  userId  String
  isAdmin Boolean @default(false) @map("is_admin")

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
  @@map("chat_members")
}

enum ChatType {
  DIRECT
  GROUP

  @@map("chat_types")
}
