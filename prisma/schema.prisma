generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  hashedPassword String   @map("hashed_password")
  name           String
  secondName     String   @map("second_name")
  role           UserRole @default(CLIENT)
  isActive       Boolean  @default(true) @map("is_acitve")
  lastSign       DateTime @default(now()) @map("last_sign")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  claims            Claim[]      @relation("UserClaims")
  claimsAsPartner   Claim[]      @relation("PartnerClaims")
  messages          Message[]
  membership        ChatMember[]
  updatedProgresses Progress[]

  partner Partner?

  @@map("users")
}

enum UserRole {
  ADMIN
  PARTNER
  AGENT
  CLIENT
  LAWYER
}

model Partner {
  id String @id @default(uuid())

  referralCode  String  @unique @map("referral_code")
  balance       Decimal @default(0)
  totalEarnings Decimal @default(0) @map("total_earnings")

  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique @map("user_id")
  refferedClaims Claim[] @relation("Referrals")

  @@map("partners")
}

model Claim {
  id               String               @id @default(cuid()) @map("id")
  step             Int                  @default(5)
  formState        String?              @default("") @map("form_state")
  userId           String?              @map("user_id")
  user             User?                @relation("UserClaims", fields: [userId], references: [id], onDelete: Cascade)
  partnerId        String?
  partner          User?                @relation("PartnerClaims", fields: [partnerId], references: [id], onDelete: Cascade)
  assignedAt       DateTime             @default(now()) @map("assigned_at")
  detailsId        String               @map("details_id")
  details          ClaimDetails         @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  stateId          String               @map("state_id")
  state            ClaimState           @relation(fields: [stateId], references: [id], onDelete: Cascade)
  flightStatuses   ClaimFlightStatus[]
  customerId       String               @map("customer_id")
  customer         ClaimCustomer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  issueId          String               @map("issue_id")
  issue            ClaimIssue           @relation(fields: [issueId], references: [id], onDelete: Cascade)
  envelopeId       String?              @map("envelope_id")
  archived         Boolean              @default(false)
  continueLink     String?              @map("continue_link")
  documents        Document[]
  passengers       OtherPassenger[]
  paymentId        String?              @map("payment_id")
  payment          ClaimPayment?        @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  recentUpdatedAt  DateTime             @default(now()) @map("recent_updated_at")
  recentUpdates    ClaimRecentUpdates[]
  signScenarios    SignScenario[]
  documentRequests DocumentRequest[]
  email            Email[]
  emailResumeClick EmailResumeClick[]
  activities       ClaimActivity[]
  referrer         String?
  referrerSource   String?              @map("referrer_source")

  duplicates   DuplicatedClaim[] @relation("ClaimOriginal")
  duplicatedOf DuplicatedClaim[] @relation("ClaimDuplicate")
  referredById String?           @map("referred_by_id")
  referredBy   Partner?          @relation("Referrals", fields: [referredById], references: [id])

  @@map("claims")
}

model DuplicatedClaim {
  id                String @id @default(cuid()) @map("id")
  claimId           String @map("claim_id")
  claim             Claim  @relation("ClaimOriginal", fields: [claimId], references: [id])
  duplicatedClaimId String @map("duplicated_claim_id")
  duplicatedClaim   Claim  @relation("ClaimDuplicate", fields: [duplicatedClaimId], references: [id])

  @@index([claimId])
  @@map("duplicated_claims")
}

model ClaimDetails {
  id           String   @id @default(cuid()) @map("id")
  date         DateTime @map("date")
  airline      String   @map("airline")
  bookingRef   String?  @map("booking_ref")
  flightNumber String   @map("flight_number")
  Claim        Claim[]
  routes       Route[]

  airlines Airline @relation(fields: [airline], references: [id])

  @@map("claim_details")
}

model Airline {
  id   String  @id @default(cuid()) @map("id")
  icao String
  iata String?
  name String

  Details ClaimDetails[]

  @@map("airlines")
}

model Route {
  id               String       @id @default(cuid()) @map("id")
  arrivalAirport   String       @unique @map("arrival_airport")
  departureAirport String       @unique @map("departure_airport")
  troubled         Boolean      @default(false)
  detailsId        String       @map("details_id")
  detail           ClaimDetails @relation(fields: [detailsId], references: [id])

  ArrivalAirport   ArrivalAirport   @relation(fields: [arrivalAirport], references: [id])
  DepartureAirport DepartureAirport @relation(fields: [departureAirport], references: [id])

  @@map("routes")
}

model ArrivalAirport {
  id      String  @id @default(cuid()) @map("id")
  icao    String
  iata    String?
  name    String
  country String?
  Route   Route?

  @@map("arrival_airports")
}

model DepartureAirport {
  id      String  @id @default(cuid()) @map("id")
  icao    String
  iata    String?
  name    String
  country String?
  Route   Route?

  @@map("departure_airports")
}

model ClaimState {
  id              String      @id @default(cuid()) @map("id")
  status          ClaimStatus @default(CLAIM_RECEIVED) @map("status")
  amount          Int         @map("amount")
  hasRecentUpdate Boolean     @default(false) @map("has_recent_update")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  progress        Progress[]
  isDuplicate     Boolean     @default(false) @map("is_duplicate")
  comments        String?
  Claim           Claim[]

  @@map("claim_states")
}

model Progress {
  id           String         @id @default(cuid()) @map("id")
  title        String         @map("title")
  description  String         @map("description")
  endAt        DateTime?      @map("end_at")
  order        Int            @default(1)
  status       ProgressStatus @default(COMPLETED) @map("status")
  claimStateId String         @map("claim_state_id")
  claimState   ClaimState     @relation(fields: [claimStateId], references: [id], onDelete: Cascade)
  updatedBy    String?
  user         User?          @relation(fields: [updatedBy], references: [id])
  createdAt    DateTime       @default(now()) @map("created_at")

  @@map("progresses")
}

enum ClaimStatus {
  COMPLETED
  PENDING
  IN_PROGRESS
  ESCALATED
  CLAIM_RECEIVED  @map("Claim Received")
  MISSING_INFO    @map("Missing Info")
  DOCS_REQUESTED  @map("Docs Requested")
  SENT_TO_AIRLINE @map("Sent to Airline")
  WAITING_AIRLINE @map("Waiting Airline")
  APPROVED        @map("Approved")
  PAID            @map("Paid")
  REJECTED        @map("Rejected")
  LEGAL_PROCESS   @map("Legal Process")
  CLOSED          @map("Closed")
  NOT_ELIGIBLE    @map("Not Eligible")
}

model ClaimFlightStatus {
  id           String                  @id @default(cuid()) @map("id")
  isCancelled  Boolean                 @default(false) @map("is_cancelled")
  delayMinutes Int                     @map("delay_minutes")
  source       ClaimFlightStatusSource

  claimId String
  claim   Claim  @relation(fields: [claimId], references: [id])

  @@map("claim_flight_statuses")
}

enum ClaimFlightStatusSource {
  FLIGHT_AWARE
  FLIGHT_STATS
  OAG
}

enum ProgressStatus {
  COMPLETED
  IN_PROCESS
}

model ClaimCustomer {
  id            String   @id @default(cuid()) @map("id")
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  email         String   @map("email")
  phone         String   @map("phone")
  address       String   @map("address")
  secondAddress String?  @map("second_address")
  city          String   @map("city")
  postalCode    String?  @map("postal_code")
  state         String?  @map("state")
  country       String?  @map("country")
  language      String?
  whatsapp      Boolean  @map("whatsapp")
  isSigned      Boolean? @default(false) @map("is_signed")
  Claim         Claim[]

  @@map("claim_customers")
}

model ClaimIssue {
  id                                 String              @id @default(cuid()) @map("id")
  delay                              DelayCategory?      @map("delay")
  cancellationNoticeDays             CancellationNotice? @map("cancellation_notice_days")
  disruptionType                     DisruptionType      @map("disruption_type")
  airlineReason                      AirlineReason?      @map("airline_reason")
  wasAlternativeFlightOffered        Boolean             @default(false) @map("was_alternative_flight_offered")
  arrivalTimeDelayOfAlternativeHours Int?                @map("arrival_time_delay_of_alternative_hours")
  additionalInfo                     String?             @map("additional_info")
  hasContactedAirline                Boolean             @default(false) @map("has_contacted_airline")
  Claim                              Claim[]

  @@map("claim_issues")
}

enum IssueReason {
  delay
  cancelled
  denied
  missed
}

enum DelayCategory {
  less_than_3hours
  never_arrived
  threehours_or_more @map("3hours_or_more")
}

enum CancellationNotice {
  less_than_14days
  fourteen_days_or_more @map("14days_or_more")
}

enum DisruptionType {
  denied_boarding
  cancellation
  delay
  missed_connection
}

enum AirlineReason {
  technical_problems
  weather
  strike
  issues
  other
  dont_remember
}

model Document {
  id          String       @id @default(cuid()) @map("id")
  name        String       @map("name")
  path        String       @map("path")
  type        DocumentType @default(DOCUMENT)
  claimId     String       @map("claim_id")
  passengerId String       @default("") @map("passenger_id")
  claim       Claim        @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentType {
  ASSIGNMENT
  PASSPORT
  DOCUMENT
  ETICKET
  BOARDING_PASS
}

model ClaimPayment {
  id            String         @id @default(cuid()) @map("id")
  email         String?        @map("email")
  termsAgreed   Boolean?       @map("terms_agreed")
  paymentMethod PaymentMethod? @map("payment_method")
  bankName      String?        @map("bank_name")
  accountName   String?        @map("account_name")
  accountNumber String?        @map("account_number")
  iban          String?        @map("iban")
  paypalEmail   String?        @map("paypal_email")
  Claim         Claim[]

  @@map("claim_payments")
}

model OtherPassenger {
  id        String    @id @default(cuid()) @map("id")
  claimId   String    @map("claim_id")
  claim     Claim     @relation(fields: [claimId], references: [id], onDelete: Cascade)
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  city      String
  country   String
  address   String
  birthday  DateTime?
  isSigned  Boolean   @default(false)
  email     String?

  isMinor         Boolean @default(false) @map("is_minor")
  parentFirstName String? @map("parent_first_name")
  parentLastName  String? @map("parent_last_name")

  SignScenario SignScenario[]

  @@map("claim_other_passengers")
}

enum PaymentMethod {
  bank_transfer
  paypal
  wise
}

model Chat {
  id        String   @id @default(uuid())
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now()) @map("created_at")

  messages Message[]
  members  ChatMember[]

  @@map("chats")
}

model Message {
  id        String        @id @default(uuid())
  chatId    String        @map("chat_id")
  senderId  String        @map("sender_id")
  content   String
  createdAt DateTime      @default(now()) @map("created_at")
  status    MessageStatus @default(UNREAD)

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@map("messages")
}

enum MessageStatus {
  READ
  UNREAD
}

model ChatMember {
  chatId  String
  userId  String
  isAdmin Boolean @default(false) @map("is_admin")

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
  @@map("chat_members")
}

enum ChatType {
  DIRECT
  GROUP

  @@map("chat_types")
}

model SignScenario {
  id          String           @id @default(uuid())
  claimId     String           @map("claim_id")
  passengerId String?          @map("passenger_id")
  requestId   String           @map("request_id")
  scenario    SignScenarioType

  claim     Claim           @relation(fields: [claimId], references: [id])
  passenger OtherPassenger? @relation(fields: [passengerId], references: [id])

  @@map("sign_scenarios")
}

enum SignScenarioType {
  MainFlow
  ExternalFlow
  OtherPassenger
}

model Email {
  id                String       @id @map("id")
  gmailThreadId     String       @map("gmail_thread_id")
  messageId         String?      @unique @map("message_id") @db.VarChar(255)
  inReplyTo         String?      @map("in_reply_to")
  references        String[]     @map("references")
  subject           String?      @map("subject")
  normalizedSubject String?      @map("normalized_subject")
  fromName          String?      @map("from_name")
  fromEmail         String?      @map("from_email")
  toName            String       @map("to_name")
  toEmail           String       @map("to_email")
  snippet           String?      @map("snippet")
  bodyPlain         String?      @map("body_plain") @db.Text
  bodyHtml          String?      @map("body_html") @db.Text
  sizeEstimate      Int?         @map("size_estimate")
  internalDate      DateTime?    @map("internal_date")
  headersJson       Json         @map("headers_json")
  type              EmailType    @default(INBOX)
  status            EmailStatus  @default(UNREAD)
  attachments       Attachment[]
  claimId           String?      @map("claim_id")
  claim             Claim?       @relation(fields: [claimId], references: [id])
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  @@index([gmailThreadId, normalizedSubject], map: "idx_email_thread_subject")
  @@map("emails")
}

enum EmailType {
  INBOX
  SENT
}

enum EmailStatus {
  READ
  UNREAD
}

model Attachment {
  id        String   @id @default(cuid()) @map("id")
  filename  String   @map("filename")
  mimeType  String   @map("mime_type")
  size      Int?     @map("size")
  path      String   @map("path")
  emailId   String   @map("email_id")
  email     Email    @relation(fields: [emailId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("attachments")
}

model EmailResumeClick {
  id String @id @default(cuid()) @map("id")

  claimId   String?  @unique @map("claim_id")
  claim     Claim?   @relation(fields: [claimId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  isClicked Boolean  @default(false) @map("is_clicked")

  @@map("email_resume_clicks")
}

model EmailUnsubscribe {
  id    String @id @default(cuid())
  email String @unique

  @@index([email])
  @@map("email_unsubscribes")
}

model DocumentRequest {
  id           String                @id @default(cuid())
  type         DocumentRequestType
  status       DocumentRequestStatus @default(ACTIVE)
  passengerId  String
  documentType DocumentType          @default(DOCUMENT) @map("document_type")
  claimId      String                @map("claim_id")
  claim        Claim                 @relation(fields: [claimId], references: [id])
  isSent       Boolean               @default(true) @map("is_sent")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @default(now()) @updatedAt @map("updated_at")

  @@map("document_requests")
}

enum DocumentRequestStatus {
  ACTIVE
  INACTIVE
}

enum DocumentRequestType {
  ETICKET
  PASSPORT
  BOARDING_PASS
  ASSIGNMENT
}

model ClaimRecentUpdates {
  id              String                   @id @default(cuid())
  type            ClaimRecentUpdatesType
  status          ClaimRecentUpdatesStatus @default(UNVIEWED)
  updatedEntityId String                   @map("updated_entity_id")
  claimId         String                   @map("claim_id")
  claim           Claim                    @relation(fields: [claimId], references: [id])
}

enum ClaimRecentUpdatesStatus {
  VIEWED
  UNVIEWED
}

enum ClaimRecentUpdatesType {
  DOCUMENT
  EMAIL
}

model ClaimActivity {
  id          String            @id @default(cuid())
  type        ClaimActivityType
  title       String
  description String
  claimId     String            @map("claim_id")
  claim       Claim             @relation(fields: [claimId], references: [id])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at")

  @@map("claim_activities")
}

enum ClaimActivityType {
  DOCUMENT
  EMAIL
}
